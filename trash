    shif + tab to bring backward
    ctr + alt + i to push forward
    ctr + / to comment or to uncomment

///////////////////////////////////////////////////////////////
import os

from youtube_dl import YoutubeDL

To_play_url = {'https://www.youtube.com/watch?v=aJOTlE1K90k', 'https://www.youtube.com/watch?v=nIjVuRTm-dc'}


def Download():
    os.chdir("D:/ToAudFiles")
    audio_downloder = YoutubeDL({'format': 'bestaudio/best'})
    for to_down in To_play_url:
        audio_downloder.extract_info(to_down)
        os.listdir("D:\ToAudFiles")
        for file in To_play_url:
            os.rename(file, file + '.mp3')


try:
    Download()
except Exception as e:
    print(e)
///////////////////////////////////////////////////////////////
   # for file in [f for f in os.listdir('C:/Users/Jwan/Desktop/Pycharm-workspace/NewsProject') if f != 'p3_radio.py' and f != '.idea']:
                                #     if file.lower().startswith(artist.lower()) or file.lower().startswith(title.lower()):
                                #         os.rename(file, fileName.lower())
                                #         shutil.move(('C:/Users/Jwan/Desktop/Pycharm-workspace/NewsProject/' + fileName.lower()), "D:\AudFiles")

                                    # else:
                                    #     continue


 # regex1 = re.compile("[\(\[].*?[\)\]]") // commented to keep (instroments)
                        # title = regex1.sub("", title).strip()



   # if 00.00 < hm_nat < 05.00 and 'I dag' not in nat:
                        #     new_dt = run_start + datetime.timedelta(days=1)
                        #     dt = new_dt.replace(hour=int(played_h), minute=int(played_m), second=0, microsecond=0)


    # for audio in audios:
    #     title_artist = audio.split(' - ')
    #     artist = title_artist[0]
    #     title = title_artist[1][:-4]
    #     directory = "D:/AudFiles/" + audio
    #     print()


# import mysql.connector
# import sys
# import boto3
# import os
#
# import psycopg2
#
# ENDPOINT = "newsproject.cwpijfqxnmps.eu-central-1.rds.amazonaws.com"
# PORT = "5432"
# USR = "postgres"
# REGION = "635679229356 "
# DBNAME = "newsproject"
#
# session = boto3.Session(profile_name='RDSCreds')
# client = session.client('rds')
#
# token = client.generate_db_auth_token(DBHostname=ENDPOINT, Port=PORT, DBUsername=USR, Region=REGION)
#
# try:
#     conn = psycopg2.connect(host=ENDPOINT, port=PORT, database=DBNAME, user=USR, password=token)
#     cur = conn.cursor()
#     cur.execute("""SELECT now()""")
#     query_results = cur.fetchall()
#     print(query_results)
# except Exception as e:
#     print("Database connection failed due to {}".format(e))


(select radioName from newsproject.dbo.audio where
                        radioName = '{}' on song.rid = radio.rid)


    # sql_update_song = """insert into newsproject.dbo.song (aid) values (select aid from newsproject.dbo.audio
    # where direction = '{}' and title = '{}' and artist = '{}' and dt = '{}')""".format(direction, title, artist, dt)
    #
    # try:
    #     cursor.execute(sql_update_song)
    #     cursor.commit()
    #     cursor.close()
    # except Exception as e:
    #     print(e)

#
# import pyodbc
#
# def save_song(rid, title, artist, dt, direction):
#     conn = pyodbc.connect(host='localhost',
#                           database='python_mysql',
#                           user='root',
#                           password='102030')
#     cursor = conn.cursor()
#     sql_save_song = """if not exists (select * from flightdb.song rid, title, artist, dt from songs where
#                         rid = '{}' and title = '{}' and artist = '{}' and dt = '{}')
#                         INSERT INTO flightdb.song (title, artist, dt)
#                         VALUES ('{}', '{}', '{}')""".format(rid, title, artist, dt, title, artist, dt)
#
#     try:
#         cursor.execute(sql_save_song)
#         cursor.commit()
#     except Exception as e:
#         print(e)
#
#     sql_update_song = """update songs set aid = (select aid from flightdb.audio where direction= '{}')""".format(direction)
#
#     try:
#         cursor.execute(sql_update_song)
#         cursor.commit()
#         cursor.close()
#     except Exception as e:
#         print(e)
#
#

////////////////////////////////////to save direction directly////////////////////////////////////////
import os

import pyodbc


def save_directory():
    conn = pyodbc.connect('Driver={SQL Server};'
                          'Server=DESKTOP-TOJ2MEL;'
                          'Database=newsproject;'
                          'Trusted_connection=yes;')
    cursor = conn.cursor()
    downloaded = os.listdir("D:\AudFiles")
    for direction in downloaded:
        sql_save_directory = """if not exists (select direction from newsproject.dbo.audio where direction = '{}')
                            INSERT INTO newsproject.dbo.audio (direction) VALUES ('{}')""".format(direction, direction)

        try:
            cursor.execute(sql_save_directory)
            cursor.commit()

        except Exception as e:
            print(e)
    cursor.close()


try:
    save_directory()
except Exception as e:
    print(e)


update audio set direction = REPLACE(direction, 'mp3', 'WAV')


# scripts = soup.find_all('script')
            # script = scripts[4]
            # script1 = script.find[1]
            # for script in scripts:
            #     script = script
            # # s = soup.find('script')
            # # js = 'window = {};\n' + s.text.strip() + ';\nprocess.stdout.write(JSON.stringify(window.__NUXT__));'
            # # with open('temp.js', 'w') as f:
            # #     f.write('window = {};\n' +
            # #             soup.find('script').text.strip() +
            # #             ';\nprocess.stdout.write(JSON.stringify(window.__NUXT__));')
            # window_init_state = check_output(['node', 'temp.js'])
            # # r = re.compile(r'window.__NUXT__ = ((.*))')
            # data = soup.find_all('script')
            # # script = r.findall(data)[0]

# unwanted = soup_more.find('aside', {'class': 'embedded-element embedded-factbox position-relative'})
                # if unwanted:
                #     unwanted.extract()
                # if not (soup.find('div', {'class': 'article-body'})):
                #     continue

# # conn = pyodbc.connect('Driver={SQL Server};'
    # #                       r'Server=DESKTOP-TOJ2MEL;'
    # #                       r'Database=newsproject;'
    # #                       r'Trusted_connection=yes;')
    # # cursor = conn.cursor()
    # sql_save_song = """if not exists (select headline, content, dt from newsproject.dbo.news
    #                     WHERE news.headline = '{}' and news.content = '{}' and news.dt = '{}')
    #                         INSERT INTO newsproject.dbo.news (headline, content, dt, pid, cid) VALUES
    #                             ('{}', '{}', '{}', (select pid from newsproject.dbo.newsprovider where providerName = '{}'),
    #                                 (select cid from newsproject.dbo.categories where category = '{}'))""".format(
    #                                     headline, content, dt, headline, content, dt, provider, category)


     # config = {
        #     "apiKey": "AIzaSyD6tkCesXLcIxTE3VQLHQTVYzYm1xM90WA",
        #     "authDomain": "the-news-project.firebaseapp.com",
        #     "databaseURL": "https://the-news-project-default-rtdb.europe-west1.firebasedatabase.app/news",
        #     "projectId": "the-news-project",
        #     "storageBucket": "the-news-project.appspot.com",
        #     "messagingSenderId": "485793982068",
        #     "appId": "1:485793982068:web:061e12e7fa180359c25321",
        #     "measurementId": "G-0CC9WEDD0Z"
        # }
        #
        # # db = firebase.database()
        # db = firebase_admin.firestore.client()
        # db.collection(u'news').document(u'n1').set(data)
        #



        #
        # cred = credentials.Certificate('AIzaSyD6tkCesXLcIxTE3VQLHQTVYzYm1xM90WA')
        # firebase_admin.initialize_app(cred)
        # firebase_admin.initialize_app(cred,
        #                               {
        #                                   'category': category,
        #                                   'content': content,
        #                                   'date': dt,
        #                                   'headline': headline,
        #                                   'provider': provider
        #                               })




        #
        # firebase = pyrebase.initialize_app(config)
        # db = firebase.database()
        # data = {'category': category,
        #         'content': content,
        #         'date': dt,
        #         'headline': headline,
        #         'provider': provider
        #         }
        # db.push(data)
#
# def save_directory(direction):
#     conn = pyodbc.connect('Driver={SQL Server};'
#                           'Server=DESKTOP-TOJ2MEL;'
#                           'Database=newsproject;'
#                           'Trusted_connection=yes;')
#     cursor = conn.cursor()
#     sql_save_directory = """if not exists (select direction from newsproject.dbo.audio where direction = '{}')
#                             INSERT INTO newsproject.dbo.audio (direction) VALUES ('{}')""".format(direction, direction)


#
#
# def save_song(radioName, title, artist, dt, direction):
#     conn = pyodbc.connect('Driver={SQL Server};'
#                           'Server=DESKTOP-TOJ2MEL;'
#                           'Database=newsproject;'
#                           'Trusted_connection=yes;')
#     cursor = conn.cursor()
#     sql_save_song = """if not exists (select radioName, dt from newsproject.dbo.song, newsproject.dbo.radio
#                         where radioName = '{}' and song.dt = '{}')
#                         INSERT INTO newsproject.dbo.song (title, artist, dt, aid, rid)
#                         VALUES ('{}', '{}', '{}', (select aid from audio where
#                         direction = '{}'), (select rid from radio where
#                         radioName = '{}'))""".format(radioName, dt, title, artist, dt, direction, radioName)
#
#     try:
#         cursor.execute(sql_save_song)
#         cursor.commit()
#     except Exception as e:
#         print(e)
#
#
# chrome_options = webdriver.ChromeOptions()
                                # chrome_options.add_experimental_option("excludeSwitches", ['enable-automation'])
                                # # driver = webdriver.Chrome(options=chrome_options)
                                # driver_path = 'C:\chromedriver.exe'
                                # driver = webdriver.Chrome(options=chrome_options, executable_path=driver_path)
                                # driver.get(play_link)

                                # browser.delete_all_cookies()
                                # data = browser.find_element_by_xpath(play_link)

                                # links = []
                                # for i in data:
                                #     links.append(i.get_attribute('href'))
                                #     print(len(links))
                                # urltxt = driver.page_source
                                # cookies = dict(BCPermissionLevel='PERSONAL')

driver = webdriver.PhantomJS(executable_path='C:\geckodriver.exe')
                                driver.get(play_link)
                                driver.implicitly_wait(1)
                                print(driver.get_cookies())
                                savedCookies = driver.get_cookies()
                                driver2 = webdriver.PhantomJS(executable_path='C:\geckodriver.exe')
                                driver2.get(play_link)
                                driver2.delete_all_cookies()
                                for cookie in savedCookies:
                                    driver2.add_cookie(cookie)
                                driver2.get(play_link)
                                driver.implicitly_wait(1)
                                print(driver2.get_cookies())
                                          # driver = webdriver.PhantomJS("C://phantomjs.exe")
                                # driver.get(play_link)
                                # urltxt = driver.page_source

  # play_link_only = play_link.split('query=')[1]
                                #
                                # options = webdriver.FirefoxOptions()
                                # options.headless = True
                                # driver = webdriver.Firefox(executable_path='C:\geckodriver.exe', options=options)
                                # driver.implicitly_wait(10)
                                # driver.get('https://www.youtube.com/')
                                # driver.find_element_by_css_selector('#search-input').send_keys(play_link_only)

browser.find_element_by_css_selector('#search-input').send_keys(play_link_only)

 # cookies = dict(BCPermissionLevel='PERSONAL')
                                # urltxt = requests.get(play_link, headers={"User-Agent": "Mozilla/5.0"}, cookies=cookies)
                                # urltxt = urltxt.content
CONSENT=YES+cb.20210328-17-p0.en+FX+501; GPS=1; YSC=l2cf_1pSRRs; VISITOR_INFO1_LIVE=8Ml91oPzzTw; PREF=f4=4000000&tz=Europe.Copenhagen
Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36


# browser.find_element_by_css_selector('#introAgreeButton > span > span').click()
                                # browser.find_element_by_css_selector('#introAgreeButton').click()


                                # headers = {"User-Agent": "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)"}
                                # urltxt = requests.get('https://www.youtube.com/results?search_query=charly+black+wine+and+kotch+raw+version', headers=headers)

                                # with HTMLSession() as session:
                                #     r = session.get(play_link, headers=headers)
                                #
                                # only_a_tags = SoupStrainer("a")
                                # soup = BeautifulSoup(r.html.html, 'lxml', parse_only=only_a_tags)
                                # for link in soup.find_all("a"):
                                #     if r"/offers/" in str(link.get("href")):
                                #         print(link.get("href"))

                                # options = webdriver.ChromeOptions()
                                # options.headless = True
                                # browser = webdriver.Chrome(executable_path='C:\chromedriver.exe')
                                # browser.implicitly_wait(10)
                                #
                                # browser.get(play_link, cook)
                                # browser.find_element_by_css_selector('#search-input').send_keys()
                                # urltxt = browser.page_source


        # try:
        #     if data_name == 'berlingske':
        #         exist = db.collection('berlingske').where('headline', '==', headline).get()
        #
        #     if exist:
        #         return
        #
        #     data = {'category': category,
        #             'content': content,
        #             'date': dt,
        #             'headline': headline,
        #             'provider': provider
        #             }
        #     db.collection('berlingske').add(data)
        # except Exception as e:
        #     print('Problem sending data to: ' + data_name)

        try:

            if data_name == 'P4_playlist':
                exist = db.collection(data_name).where('date', '==', dt).where('title', '==', title).where('artist', '==', artist).get()

                if exist:
                    return

                data = {'title': title,
                        'artist': artist,
                        'date': dt,
                        'fileName': fileName
                        }
                db.collection(data_name).add(data)
        except Exception as e:
            print('Problem sending data to: ' + data_name)